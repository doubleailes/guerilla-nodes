docformatrevision(19)
oid[1]=create("ShaderNodeSL","","Random")
	oid[2]=create("ShaderNodeIn","$1","Input1")
		set("$2.Desc",types.enum {"Float","Vector","Color"})
		set("$2.HideInput",true)
		set("$2.PlugName","Mode")
	oid[3]=create("ShaderNodeIn","$1","Input2")
		set("$3.Desc",types.vector)
		set("$3.HideInput",false)
		set("$3.PlugName","v")
		set("$3.Value",0)
	oid[4]=create("ShaderNodeOut","$1","Output1")
		set("$4.PlugName","Output")
	set("$1.NodePos",{211.53896548132,6.2573459926324})
	set("$1.Script","// %param Mode={type=types.enum{\"Float\", \"Vector\", \"Color\"}, help=\"Type of random output. Vector will return a random normalized vector.\"}\010\010color randomf (vector v)\010{\010\009// Returns a random float between 0 and 1 for a given input vector.\010\010\009// %param v={type=types.vector, help=\"Input Vector\"}\010\009\010\009// v (vector): output random float\010\010\009v = vector(v[0]+1, v[1]+1, v[2]+1);\010\010\009float t = sin(v . vector(12.9898, 78.233, 43.47865)) * 43758.5453123;\010    return color(t - floor(t));\010}\010\010color randomColor (vector v)\010{\010\009// Returns a random normalized vector for a given input vector.\010\010\009// %param v={type=types.vector, help=\"Input Vector\"}\010\009\010\009// v (vector): output random float\010\010\009v = vector(v[0]+1, v[1]+1, v[2]+1);\010\010\009float t0 = sin(v . vector(12.9898, 78.233, 43.47865)) * 43758.5453123;\010\009float t1 = sin(v . vector(13.2454, 54.215, 47.51247)) * 38754.9543125;\010\009float t2 = sin(v . vector(15.6873, 68.124, 42.34445)) * 51544.2315798;\010    return color(t0 - floor(t0), t1 - floor(t1), t2 - floor(t2));\010}\010\010color enum (string Mode; vector v)\010{\010\009return Mode == \"Float\" ? randomf(v) : (Mode == \"Color\" ? randomColor(v) : color(normalize(vector(randomColor(v)))));\010}\010")
